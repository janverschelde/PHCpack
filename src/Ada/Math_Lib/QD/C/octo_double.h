/* file: octo_double.h */

/* This file contains the header files for a standalone,
   self-contained collection of routines for octo double arithmetic,
   based on the CAMPARY and the QD software libraries.

All functions in this library have the prefix od_
to avoid potential name clashes with other multiple doubles. */

#ifndef __octo_double_h__
#define __octo_double_h__

/************************* normalizations ************************/

void od_renorm8
 ( double f0, double f1, double f2, double f3, double f4, double f5,
   double f6, double f7, double f8, double *pr, double *r0, double *r1,
   double *r2, double *r3, double *r4, double *r5, double *r6, double *r7 );
/*
 * DESCRIPTION :
 *   Definitions common to fast_renorm2L<9,8> and renorm2L_4Add1<8,8>
 *   from code of the specRenorm.h, generated by the CAMPARY library,
 *   in an unrolled form (Valentina Popescu, Mioara Joldes), with
 *   double double basics of QD-2.3.9 (Y. Hida, X.S. Li, and D.H. Bailey).
 *
 * ON ENTRY :
 *   f0       most significant word;
 *   f1       second most significant word;
 *   f2       third most significant word;
 *   f3       fourth most significant word;
 *   f4       fifth most significant word;
 *   f5       sixth most significant word;
 *   f6       seventh most significant word;
 *   f7       least significant word;
 *   pr       computed by the start of the renormalization.
 *
 * ON RETURN :
 *   pr       updated value by renormalization;
 *   r0       highest part of a octo double number;
 *   r1       second highest part of an octo double number;
 *   r2       third highest part of an octo double number.
 *   r3       fourth highest part of an octo double number;
 *   r4       fourth lowest part of an octo double number;
 *   r5       third lowest part of an octo double number;
 *   r6       second lowest part of an octo double number;
 *   r7       lowest part of an octo double number. */

void od_fast_renorm
 ( double x0, double x1, double x2, double x3, double x4, double x5,
   double x6, double x7, double x8, double *r0, double *r1, double *r2,
   double *r3, double *r4, double *r5, double *r6, double *r7 );
/*
 * DESCRIPTION :
 *   The definition is based on the fast_renorm2L<9,8>,
 *   from code of the specRenorm.h, generated by the CAMPARY library,
 *   in an unrolled form (Valentina Popescu, Mioara Joldes), with
 *   double double basics of QD-2.3.9 (Y. Hida, X.S. Li, and D.H. Bailey).
 *
 * ON ENTRY :
 *   x0       most significant word;
 *   x1       second most significant word;
 *   x2       third most significant word;
 *   x3       fourth most significant word;
 *   x4       fifth most significant word;
 *   x5       sixth most significant word;
 *   x6       seventh most significant word;
 *   x7       eighth most significant word;
 *   x8       least significant word.
 *
 * ON RETURN :
 *   r0       highest part of an octo double number;
 *   r1       second highest part of an octo double number;
 *   r2       third highest part of an octo double number.
 *   r3       fourth highest part of an octo double number;
 *   r4       fourth lowest part of an octo double number;
 *   r5       third lowest part of an octo double number;
 *   r6       second lowest part of an octo double number;
 *   r7       lowest part of an octo double number. */

void od_renorm_add1
 ( double x0, double x1, double x2, double x3, double x4, double x5,
   double x6, double x7, double y, double *r0, double *r1, double *r2,
   double *r3, double *r4, double *r5, double *r6, double *r7 );
/*
 * DESCRIPTION :
 *   The definition is based on the renorm2L_4Add1<8,8>,
 *   from code of the specRenorm.h, generated by the CAMPARY library,
 *   in an unrolled form (Valentina Popescu, Mioara Joldes), with
 *   double double basics of QD-2.3.9 (Y. Hida, X.S. Li, and D.H. Bailey).
 *
 * ON ENTRY :
 *   x0       most significant word of an octo double x;
 *   x1       second most significant word of an octo double x;
 *   x2       third most significant word of an octo double x;
 *   x3       fourth most significant word of an octo double x;
 *   x4       fourth lowest part of an octo double number x;
 *   x5       third lowest part of an octo double number x;
 *   x6       second lowest part of an octo double number x;
 *   x7       least significant word of an octo double x;
 *   y        double to be added to x.
 *
 * ON RETURN :
 *   r0       highest part of x + y;
 *   r1       second highest part of x + y;
 *   r2       third highest part of x + y;
 *   r3       fourth highest part of x + y;
 *   r4       fourth lowest part of x + y;
 *   r5       third lowest part of x + y;
 *   r6       second lowest part of x + y;
 *   r7       lowest part of x + y. */

/****************************** copy *****************************/

void od_copy ( const double *a, double *b );
/*
 * DESCRIPTION :
 *   Copies the content of the octo double a to the octo double b. */

/******************* addition and subtraction *********************/

/* octo double = octo double + octo double */
void od_add ( const double *a, const double *b, double *c );
/*
 * DESCRIPTION : c = a + b, or in words:
 *   Adds two octo doubles in a and b to make the octo double c. */

/* octo double = octo double + double */
void od_add_od_d ( const double *a, double b, double *c );
/*
 * DESCRIPTION : c = a + b, or in words:
 *   Adds the octo double in a and the double b
 *   to make the octo double c. */

/* octo double = - octo double */
void od_minus ( double *a );
/*
 * DESCRIPTION :
 *   Flips the sign of a. */

/* octo double = octo double + octo double */
void od_sub ( const double *a, const double *b, double *c );
/*
 * DESCRIPTION : c = a - b, or in words:
 *   Subtracts from the octo double in a
 *   the octo double in b to make the octo double c. */

/**************  multiplications and division ***********************/

/* octo double = octo double * octo double */
void od_mul ( const double *a, const double *b, double *c );
/*
 * DESCRIPTION : c = a * b, or in words:
 *   Multiples the octo doubles a and b to make the octo double c. */

/* octo double = octo double * double */
void od_mul_od_d ( const double *a, double b, double *c );
/*
 * DESCRIPTION : c = a * b, or in words:
 *   Multiples the octo double a with the double b
 *   to make the octo double c. */

/* octo double = octo double / octo double */
void od_div ( const double *a, const double *b, double *c );
/*
 * DESCRIPTION : c = a / b, or in words:
 *   Divides the octo double a by the octo double b
 *   to make the octo double c. */

/******************* random number generator ***************************/

void od_random ( double *x );
/*
 * DESCRIPTION :
 *   Returns in x a random octo double number in [0,1]. */

/************************ basic output *********************************/

void od_write_doubles ( const double *x );
/*
 * DESCRIPTION :
 *   Writes the doubles in the octo double number x. */

#endif /* __octo_double_h__ */
